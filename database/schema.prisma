datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  applications  Application[]
  skills        Skill[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id              String   @id @default(uuid()) @map("_id")
  title           String
  company         String
  location        String
  type            String
  minimumSalary   Int
  maximumSalary   Int
  description     String
  requirements    String
  url             String
  email           String
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  application     Application[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Application {
  id          String   @id @default(uuid()) @map("_id")
  userId      String
  jobId       String
  resumeUrl   String?
  user        User     @relation(fields: [userId], references: [id])
  job         Job      @relation(fields: [jobId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  progress  Int      @default(0)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}